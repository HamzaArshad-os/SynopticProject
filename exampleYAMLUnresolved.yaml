openapi: 3.0.0
info:
  version: 1.0.0
  title: 'Create a Blog Engine'
  description: 'Full-Stack Web Development 22/23 Assignment (6G5Z0042): Build a blog engine. For help on getting started, refer to the assignment brief, teaching material, or contact Ash.'
  contact:
    name: 'Ashley Williams'
    email: 'ashley.williams@mmu.ac.uk'


paths:
  /users:
    get:
      tags:
        - User Management
      summary: 'View a list of all users'
      operationId: getUsers
      description: |
        Will return a list of all users within the system.
      security:
        - User: []
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Users'
        401:
          description: 'Unauthorised'
        500:
          description: 'Server Error'
        
    post:
      tags:
        - User Management
      summary: 'Add a new user'
      operationId: addUser
      description: |
        Will create a new user in the system.
      security:
        - User: []
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/AddUser'
      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AddUserResponse'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorised'
        500:
          description: 'Server Error'
  
  /users/{user_id}:
    delete:
      deprecated: true
      tags:
        - User Management
      summary: 'Delete a user'
      operationId: deleteUser
      description: |
        Delete a user from the system.
      security:
        - User: []
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorised'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'
  
  /login:
    post:
      tags:
        - User Management
      summary: 'Log into an account'
      operationId: loginUser
      description: |
        Will log a user into their account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: 'Invalid email/password supplied'
        500:
          description: 'Server Error'
  
  /logout:
    post:
      tags:
        - User Management
      summary: 'Log out of an account'
      operationId: logoutUser
      description: |
        Will log a user out of their account.
      security:
        - User: []
      responses:
        200: 
          description: 'OK'
        401:
          description: 'Unauthorised'
        500:
          description: 'Server Error'
  
  /articles:
    get:
      tags:
        - Article Management
      summary: 'Get a list of all articles'
      operationId: getArticles
      description: |
        Will return a list of all articles, ordered by date (newest first).
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Articles'
        500:
          description: 'Server Error'
      
    post:
      tags:
        - Article Management
      summary: 'Add a new article'
      operationId: addArticle
      description: |
        Add a new article into the system.
      security:
        - User: []
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/AddArticle'
      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AddArticleResponse'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorised'
        500:
          description: 'Server Error'
  
  /articles/{article_id}:
    get:
      tags:
        - Article Management
      summary: 'Get a single article'
      operationId: getArticle
      description: |
        Retrieves the information for a single article.
      parameters:
        - $ref: '#/components/parameters/article_id'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/SingleArticle'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'
      
    patch:
      tags:
        - Article Management
      summary: 'Update an article'
      operationId: updateArticle
      description: |
        Update an article (published date will stay the same).
      parameters:
        - $ref: '#/components/parameters/article_id'
      security:
        - User: []
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/UpdateArticle'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorised'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'
      
    delete:
      tags:
        - Article Management
      summary: 'Delete an article'
      operationId: deleteArticle
      description: |
        Deletes an article from the system.
      parameters:
        - $ref: '#/components/parameters/article_id'
      security:
        - User: []
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorised'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'
  
  /articles/{article_id}/comments:
    get:
      tags:
        - Comment Management
      summary: 'Get a list of all comments for an article'
      operationId: getComments
      description: |
        Get a list of comments for a given article.
      parameters:
        - $ref: '#/components/parameters/article_id'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Comments'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'
      
    post:
      tags:
        - Comment Management
      summary: 'Add a new comment to an article'
      operationId: addComment
      description: |
        Add a new comment to an article.
      parameters:
        - $ref: '#/components/parameters/article_id'
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/AddComment'
      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AddCommentResponse'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorised'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'
  
  /comments/{comment_id}:
    delete:
      tags:
        - Comment Management
      summary: 'Delete a comment'
      operationId: deleteComment
      description: |
        Delete a comment from an article.
      parameters:
        - $ref: '#/components/parameters/comment_id'
      security:
        - User: []
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorised'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'


components:
  parameters:
    user_id:
      name: user_id
      in: path
      description: A unique integer ID for identifying a User
      required: true
      schema:
        type: integer
    article_id:
      name: article_id
      in: path
      description: A unique integer ID for identifying a Article
      required: true
      schema:
        type: integer
    comment_id:
      name: comment_id
      in: path
      description: A unique integer ID for identifying a Comment
      required: true
      schema:
        type: integer
  
  schemas:
    User:
      type: object
      required:
        - user_id
        - first_name
        - last_name
        - email
      properties:
        user_id:
          type: integer
          example: 3
        first_name:
          type: string
          example: Ashley
        last_name:
          type: string
          example: Williams
        email:
          type: string
          format: email
          example: ashley.williams@mmu.ac.uk
    
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    
    AddUser:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
          example: Ashley
        last_name:
          type: string
          example: Williams
        email:
          type: string
          format: email
          example: ashley.williams@mmu.ac.uk
        password:
          type: string
          example: hello123
          
    AddUserResponse:
      type: object
      properties:
        user_id:
          type: integer
          example: 14
          
    LoginUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: ashley.williams@mmu.ac.uk
        password:
          type: string
          example: hello123
          
    LoginResponse:
      type: object
      properties:
        user_id:
          type: integer
          example: 14
        session_token:
          type: string
          example: b5d9e7be6c97aa855f721b6e742120f2
    
    Articles:
      type: array
      items:
        $ref: '#/components/schemas/SingleArticle'
        
    AddArticle:
      type: object
      required:
        - title
        - author
        - article_text
      properties:
        title:
          type: string
          example: '5 Best Blog Engines'
        author:
          type: string
          example: 'Megan'
        article_text:
          type: string
          example: 'This is the articles main body text.'
    
    AddArticleResponse:
      type: object
      properties:
        article_id:
          type: integer
          example: 14
    
    SingleArticle:
      type: object
      required:
        - article_id
        - title
        - author
        - date_published
        - date_edited
        - article_text
      properties:
        article_id:
          type: integer
          example: 7
        title:
          type: string
          example: '5 Best Blog Engines'
        author:
          type: string
          example: 'Megan'
        date_published:
          type: string
          format: date
          example: '2022-08-04'
        date_edited:
          type: string
          format: date
          example: '2022-09-24'
        article_text:
          type: string
          example: 'This is the articles main body text.'
        
    UpdateArticle:
      type: object
      required:
        - title
        - author
        - article_text
      properties:
        title:
          type: string
          example: '5 Best Blog Engines'
        author:
          type: string
          example: 'Megan'
        article_text:
          type: string
          example: 'This is the articles main body text.'
    
    Comments:
      type: array
      items:
        $ref: '#/components/schemas/SingleComment'
    
    SingleComment:
      type: object
      required:
        - comment_id
        - date_published
        - comment_text
      properties:
        comment_id:
          type: integer
          example: 982
        date_published:
          type: string
          format: date
          example: '2022-08-14'
        comment_text:
          type: string
          example: 'Great article. Loved it.'
    
    AddComment:
      type: object
      required:
        - comment_text
      properties:
        comment_text:
          type: string
          example: 'Great article. Loved it.'
    
    AddCommentResponse:
      type: object
      properties:
        comment_id:
          type: integer
          example: 14
        
  securitySchemes:
    User:
      type: apiKey
      name: X-Authorization
      in: header
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/zedrem/FullStack-WebDev-Assignment/1.0.0